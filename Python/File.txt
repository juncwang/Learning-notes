创建文件

f = open('文件路径','读写模式',encodeing = 'utf-8')	//通过 文件路径 设置 读写模式 设置字符编码 打开并返回一个文件对象

with open('文件路径','读写模式',encodeing = 'utf-8') as f:
	....
	....						//通过 with 语句创建文件，离开代码块，文件自动关闭

with open('文件路径','读写模式',encodeing = 'utf-8') as f1，open('文件路径','读写模式',encodeing = 'utf-8') as f2:
	....
	....						//通过 with 语句创建文件，同时拿到两个文件对象


r，只读模式（默认）。
w，只写模式。[不可读；不存在则创建；存在则删除内容；]
a，追加模式。[可读；   不存在则创建；存在则只追加内容；]

+ 表示可以同时读写某个文件
r+，可读写文件。[可读；可写；可追加]
w+，写读
a+，同a

U 表示在读取时，可以将 \r\n\r\n 自动转换成\n(与r 或 r+同时使用)
rU
r+U

b 表示处理二进制文件(如: FTP发送上传ISO镜像文件,linux可忽略,windows处理二进制文件时需标注)
rb
wb
ab


读取文件

f.read()						//文件对象通过 此方法 返回文件所有内容
f.read(num)						//文件对象通过 此方法 返回文件 num 字符的内容
f.readline()						//读取一行文本
f.readlines()						//读取所有文件，并返回一个列表，每个参数为一行(内存消耗比较大)

for i in f:						//读取每行数据时，可以使用for循环，系统将自动采用迭代器的方式，减少内存占用量

写入文件

f.write('写入内容')					//文件对象通过 此方法 进行文件写入到缓存区
f.flush()						//把缓存区文件写入磁盘

关闭文件

f.close()						//文件对象通过 此方法 进行关闭文件，关闭前把缓存区数据写入磁盘



方法

f.fileno()						//返回一个文件句柄
f.tell()						//返回指针当前的位置
f.seek(num)						//调整光标位置
f.truncate()						//截断，默认重开始到最后,只能用于 wa 模式
f.truncate(num)						//截断，截断第 Num 个字符以后的内容