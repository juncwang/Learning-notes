set创建方法

s = set("abcd")
s = set(list)
s = set(tuple)
s = set(dict)

frozenset创建方法

s = frozenset("abcd")
s = frozenset(list)
s = frozenset(tuple)
s = frozenset(dict)

可以用作去重处理,set 会对内容进行去重处理

只能通过for i in s:进行取值

判断是否有某个元素 i in s 返回 bool


添加
s.add(var)					// 只能添加一个,str只会添加第一个字符
s.update(var)					// 可以添加一个序列,str作为一个字符序列

删除
s.remove(var)					// 删除指定变量
s.pop()						// 随机删除一个变量
s.clear()					// 清空集合

集合操作符

print(set('alex') == set('alexexex'))		// 返回bool 两个集合内的序列是否相等

print(s1 < s2)					// 返回bool 左边集合内的序列是否都在右边集合内有，并且右边集合比左边多
s1.issuperset(s2)				// 同上
print(s1 > s2)					// 返回bool 与上面相反
s1.issubset(s2)					// 同上

print(set('alex') and set('alexw'))		// 返回一个新集合，集合内包含左右两边集合所有元素，并去重
s1 | s2						// 同上
s.union(set())					// 并集，等价于上面

print(set('alex') or set('alexw'))		// 返回一个新集合，集合内包含左右两边集合重复的序列,不重复的都去掉
s1 & s2						// 同上
s.intersection(set())				// 交际，等价于上面

s.difference(set())				// 差集，返回一个新的集合，得到 s 内有的 set() 内没有的成员，set() 内其他成员忽略
s1 - s2						// 同上

s.symmetric_difference(set())			// 反向交集，返回一个新的集合，得到 s 与 set() 内没有重复的序列
s1 ^ s2						// 同上





