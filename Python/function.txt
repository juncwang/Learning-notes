程序
exit()							//退出程序
exit("字符串")						//退出程序，并打印字符串

输入输出

input("打印的内容:")					//提示用户并让用户输入值，并返回

print("Hello World!")					//打印字符串
print(u"中文字符")					//中文字符时，需在前面加 u 后程序自动把字符串转为unicode
print("Hello World!",end = "")				//输出完成后不换行,中间字符串是结尾处理符合
print("Hello World!",end = "", flush=True)		//增加立即显示功能，打印出字符串后立即输出


转换类型

int(var)						//转换成 int 类型
float(var)						//转换成 float 类型
str(var)						//转换成 str 类型
eval(var)						//转换成 字典,元祖,列表
repr(var)						//转换成 字符串(忽略转义字符作用),方便电脑识别，等价于 r"str"

变量操作

del 变量						//回收变量

变量类型

type(变量)						//变量类型
id(变量)						//返回内存地址

数据操作

range(num)						//for循环调用 返回 0 - (num-1)
range(num1,num2)					//for循环调用 返回 num1 - (num2-1)
range(num1,num2,num3)					//for循环调用 返回 num1 - (num2-1),每次跳num3

sorted(list)						//使用list列表排序后，返回一个新的列表

enumerate(list,num)					//把列表内容按元祖形式返回会来(0,list[0])，并在前面加入标号(num为标号头部,默认为0)，只能用在for循环上

len(list)						//返回列表长度

判断
all(iter)						//返回bool,检测列表，元祖，字典内部有空值返回假，反之返回真
bool(var)						//返回bool,判断表达式或变量是否为真(有值)

创建

var = list((1,2,3))					//创建一个列表
var = tuple((1,2,3))					//创建一个元祖
var = dict((('name','alex),))				//创建一个字典
var = set('alex li')					//创建一个集合

数据处理

abs()							//返回一个绝对值

重要的函数

=============================================================================================

filter(function, sequence)				//返回一个迭代器，起到过滤作用

例：
str = ['a', 'b', 'c', 'd']
def fun1(s):
    if s != 'a':
        return s
ret = filter(fun1, str)
print(list(ret))  # ret是一个迭代器对象
#['b', 'c', 'd']

================================================================================================

map(function, sequence)					//返回一个迭代器，对字符串进行处理

str = [ 'd' , 'a' , 'b' ]
def fun2(s):
    return s + "alvin"
ret = map(fun2, str)
print(ret)      #  map object的迭代器
print(list(ret))#  ['aalvin', 'balvin', 'calvin', 'dalvin']
#['dalvin', 'aalvin', 'balvin']

=================================================================================================

lambda							//匿名函数

add = lambda a,b : a + b
print add(2,3)


