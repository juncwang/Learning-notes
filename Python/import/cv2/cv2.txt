头文件

import cv2

安装方法

https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html

===========================================================================================================
枚举类型

EVENT
cv2.EVENT_LBUTTONDBLCLK		// 鼠标左键双击事件
cv2.EVENT_LBUTTONDOWN		// 鼠标左键点击事件
cv2.EVENT_MOUSEMOVE		// 鼠标移动事件
cv2.EVENT_LBUTTONUP		// 鼠标左键抬起事件

lineStyle
cv2.LINE_AA			// 抗锯齿

color
cv2.COLOR_BGR2GRAY		// 彩色图片转成灰度图
cv2.COLOR_GRAY2BGR		// 灰度图转成彩色图片
cv2.COLOR_BGR2HSV		// 彩色图片转HSV

fontStyle
cv2.FONT_HERSHEY_SIMPLEX	// 文字类型

borderType
cv2.BORDER_CONSTANT		// 直接填充颜色，后之后可以增加 value = [255,0,0]
cv2.BORDER_REFLECT
cv2.BORDER_REFLECT_101
cv2.BORDER_DEFAULT
cv2.BORDER_REPLICATE
cv2.BORDER_WRAP

threshold
cv2.THRESH_BINARY
cv2.THRESH_BINARY_INV
cv2.THRESH_TRUNC
cv2.THRESH_TOZERO
cv2.THRESH_TOZERO_INV
cv2.THRESH_OTSU

thresh_type
cv2.ADAPTIVE_THRESH_MEAN_C
cv2.ADAPTIVE_THRESH_GAUSSIAN_C

depthType
cv2.CV_8U
cv2.CV_16S
cv2.CV_64F

contoursMode
cv2.RETR_EXTERNAL				// 表示只检测外轮廓
cv2.RETR_LIST				// 检测的轮廓不建立等级关系
cv2.RETR_CCOMP				// 建立两个等级的轮廓，上面的一层为外边界，里面的一层为内孔的边界信息。如果内孔内还有一个连通物体，这个物体的边界也在顶层。
cv2.RETR_TREE				// 建立一个等级树结构的轮廓。

contoursMethod
cv2.CHAIN_APPROX_NONE			// 存储所有的轮廓点，相邻的两个点的像素位置差不超过1，即max（abs（x1-x2），abs（y2-y1））==1
cv2.CHAIN_APPROX_SIMPLE			// 压缩水平方向，垂直方向，对角线方向的元素，只保留该方向的终点坐标，例如一个矩形轮廓只需4个点来保存轮廓信息
cv2.CHAIN_APPROX_TC89_L1			// 使用teh-Chinl chain 近似算法

===========================================================================================================

方法
===========================================================================================================
矩阵

kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(5, 5))	// 获取 5x5 的方向矩阵
kernel = cv2.getStructuringElement(cv2.MORPH_CROSS,(5, 5))	// 获取 5x5 的十字矩阵
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(5, 5))	// 获取 5x5 的椭圆矩阵

===========================================================================================================
图片运算

img = cv2.add(img,img)				// 加法运算，如果大于255就等于255
img = cv2.subtract(image,M)				// 减法运算
img = cv2.absdiff(img1,img2)				// 减法运算后求绝对值
img = img + img					// 加法运算，如果大于255就减去255得到余值
img = cv2.addWeighted(img1,0.7,img2,0.3,0)		// 图片融合（图一，透明度，图二，透明度，gamma）

ret, mask = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)	// 返回图片阈值（输入灰度图片，阈值，超过阈值所赋予的值，计算阈值的类型）
ret, mask = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)	
						// 返回图片阈值（输入灰度图片，阈值，超过阈值所赋予的值，计算阈值的类型 + 基于直方图的二值化）
mask = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
						// 返回自适应阈值（输入灰度图，超过阈值所赋予的值，阈值的计算方法，计算阈值的类型，图片中分块的大小，阈值计算方法中的常数项）
mask = cv2.inRange(hsv, lower_red, upper_red)		// 利用hsv设置阈值（hsv图片，阈值，超过阈值所赋予的值）

imgInv = cv2.bitwise_not(img)				// 图片颜色反转
img = cv2.bitwise_and(img1, img2,  mask = mask)		// 图片与运算
img = cv2.bitwise_or(img1, img2,  mask = mask)		// 图片或运算
img = cv2.bitwise_xor(img1, img2,  mask = mask)		// 图片异或运算

img=cv2.filter2D(img,-1,kernel)				// 使用滤波对图片进行过滤(图片，固定参数，滤波值-详见numpy.array)

img = cv2.blur(img,(5,5))				// 图片平滑模糊（图片，高斯矩阵-长宽（参数整奇数））
img = cv2.medianBlur(img, i)				// 图片中值模糊（图片，参数整奇数）
img = cv2.GaussianBlur(img,(5,5),0)			// 图片高斯模糊（图片，高斯矩阵-长宽（参数整奇数），差取值）
img = cv2.bilateralFilter(img,9,75,75)			// 图片双边模糊（图片，颜色标准差，空间标准差，空间标准差）

img = cv2.erode(img,kernel,iterations = 1)		// 腐蚀图片（图片，多维数组，次数）
img = cv2.dilate(img,kernel,iterations = 1)			// 膨胀图片（图片，多维数组，次数）
img = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)	// 闭运算（图片，运算类型闭合，多维数组）
img = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)	// 开运算（图片，运算类型开启，多维数组)
img = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel)	// 顶运算（图片，运算类型开启，多维数组)
img = cv2.morphologyEx(img, cv2.MORPH_BLACKHAT, kernel)	// 低运算（图片，运算类型开启，多维数组)

img = cv2.Laplacian(img,cv2.CV_64F,ksize = 1)		// 拉普拉斯算子（图片，计算需要的深度（-1为默认深度），算子大小）
imgx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)		// 索贝尔算子（图片，计算需要的深度（-1为默认深度），1，0，算子大小）
imgy = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=5)		// 索贝尔算子（图片，计算需要的深度（-1为默认深度），0，1，算子大小）

img = cv2.Canny(img,100,200)				// 图片边界检查（图片，最小值，最大值）

===========================================================================================================
图片处理

img = cv2.imread('imageURL',0)			// 读取图片地址 ( 地址，参数: 0.灰度图 1.彩色图 )
cv2.imshow('imgName',img)				// 显示读取后的图片 （ 显示框名称，图片变量 ）
cd2.imwrite('SaveImageURLName',img)			// 将图片写入本地 （ 保存文件的名称及位置，图片变量）
cv2.filip(img, 0)					// 图片翻转

img = cv2.line(img, (0,0), (511, 511), (255, 0, 0), 5, cv2.LINE_AA)			// 绘制一条直线（图片变量，位置一，位置二，颜色值，宽度，抗锯齿方式）
img = cv2.rectangle(img, (0,0), (100,100), (134,234,98), 1, cv2.LINE_AA)		// 绘制一个矩形（图片变量，位置一，位置二，颜色值，宽度（-1代表填充），抗锯齿方式）
img = cv2.circle(img, (255,255), 50, (0,0,255), -1, cv2.LINE_AA)			// 绘制一个圆形（图片变量，圆心，半径，颜色值，宽度（-1代表填充），抗锯齿方式）
img = cv2.ellipse(img, (255,255), (100,50), 45, 0, 360, (23,128,66), -1, cv2.LINE_AA)	// 绘制一个椭圆（图片变量，圆心，长短轴半径，旋转角度，显示开始角度，显示结束角度，颜色，宽度（-1代表填充），抗锯齿方式）
img = cv2.polylines(img, [pts], True, (234,123,234), 1, cv2.LINE_AA)		// 绘制一个多边形（图片变量，[RAW*1*2的点数组]必须是np.int32, 是否闭合，宽度）

===========================================================================================================
直方图

histr = cv2.calcHist([img], [i], None, [256], [0, 256])		// 获取直方图（图片，表示通道，Mask，...）
histr = cv2.calcHist( [img], [0, 1], None, [180, 256], [0, 180, 0, 256] )	// 二维直方图
img = cv2.equalizeHist(img)				// 直方图均匀化

clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
cl1 = clahe.apply(img)				// 自适应直方图均衡(提亮暗部，降低亮部）

===========================================================================================================
视频读取

cap = cv2.VideoCapture(0)				// 开启摄像头（参数：0.表示系统默认摄像头）
cap = cv2.VideoCapture(imgURL)				// 读取视频文件（参数：视频文件路径）

cap.get(3)						// 获取视频信息（参数：3.图片宽度，4.图片高度，5.摄像头帧率
cap.set(3, 320)						// 设置视频对应参数的值
cap.isOpened()						// 判断视频是否打开

ret, color_frame = cap.read()				// 读取视频上的图片，返回值List[返回是否成功, 成功后的 img]
cap.release()						// 回收视频内存

===========================================================================================================
视频保存

fourcc = cv2.VideoWriter_fourcc(*'XVID')				// 设置视频编码
out = cv2.VideoWriter('OutPut_01.avi', fourcc, 20.0, (640, 480))	// 定义保存视频信息( 保存文件名, 视频编码, 帧率, 分辨率）
out.write(Img)								// 将单张图片写入视频流
out.release()								// 关闭视频流并保存

===========================================================================================================
图片转换

gray_frame = cv2.cvtColor(color_frame, cv2.COLOR_BGR2GRAY)		// 把彩色图片转成灰度图

===========================================================================================================
文字绘制

cv2.putText(img, 'fontText', (10,30), fontStyle, 1, (255,255,255), 1, cv2.LINE_AA)	// 在图片上绘制文字（图片变量，输出文字， 位置， 文字样式， 文字大小，颜色，宽度，抗锯齿方式）

===========================================================================================================
窗口绘制

cv2.namedWindow('image')				// 创建一个窗口（名称）
cv2.setMouseCallback('image', funcName)		// 给窗口一个鼠标事件回掉函数（窗口名称，方法名称）
def funcName(event, x, y, flags, param)			// 回掉函数的格式（事件，鼠标X位置，鼠标Y位置，旗帜，参数）

===========================================================================================================
跟踪栏

cv2.createTrackbar('name','image',0,255,func)		// 创建一个跟踪栏（名称，所在窗口名称，最小值，最大值，回掉方法）
def func(x)					// 回掉函数的格式
name = cv2.getTrackbarPos('name','image')		// 获取跟踪栏的值（跟踪栏名称，所在窗口名称）

===========================================================================================================
添加边框

img = cv2.copyMakeBorder(img,10,10,10,10,cv2.BORDER_REPLICATE)	// 给图片添加一个边框（图片变量，上下左右边框宽度，边框类型）

===========================================================================================================
轮廓检测

outImg, contours, hierarchy = cv2.findContours(make,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)	
// 找到轮廓线（黑白图片，轮廓线检索模式，轮廓线近似方法）
img = cv2.drawContours(img, contours, -1, (0,255,0), 3)
// 绘制轮廓线（图片变量，轮廓线变量list，绘制轮廓list的哪一给变量（-1则是所有），轮廓颜色，线段宽度）
cnt = contours[0];	
M=cv2.moments(cnt)				// 获取图像的矩的字典
area=cv2.contourArea(cnt)				// 获取轮廓面积
perimeter = cv2.arcLength(cnt,True)			// 获取轮廓周长（2：是否闭合）
approx = cv2.approxPolyDP(cnt,perimeter*0.1,True)		// 获取轮廓近似
hull = cv2.convexHull(cv2.convexHull(cnt, hull,clockwise, returnPoints)
						// 获取轮廓凸包(后三给参数可不填,3: 用顺时针还是逆时针bool,4: 凸包的坐标或凸包对应点的坐标bool）
-------------------------------------------------------------------------------------------------------------------
计算凸包及离凸包最远的点

hull = cv2.convexHull(cnt,returnPoints = False)
defects = cv2.convexityDefects(cnt,hull)

for i in range(defects.shape[0]):
    s,e,f,d = defects[i,0]
    start = tuple(cnt[s][0])				// 凸包开始点
    end = tuple(cnt[e][0])				// 凸包结束点
    far = tuple(cnt[f][0])				// 最远的点
    cv2.line(img,start,end,[0,255,0],2)
    cv2.circle(img,far,5,[0,0,255],-1)
-------------------------------------------------------------------------------------------------------------------

k=cv2.isContourConvex(cnt)				// 可以检测一个曲线是不是凸的
x,y,w,h=cv2.boundingRect(cnt)				// 获取边界矩形
pos = cv2.minAreaRect(cnt)				// 获取最小的边界矩形，返回元祖((x,y),(w,h),角度）
pts = cv2.boxPoints(pos)				// 把最小边界矩形转换成点
(x,y),radius = cv2.minEnclosingCircle(cnt)			// 获取最小外接圆
ellipse = cv2.fitEllipse(cnt)				// 椭圆拟合
[vx,vy,x,y]=cv2.fitLine(cnt,cv2.DIST_L2,0,0.01,0.01)		// 直线拟合

dist = cv2.pointPolygonTest(cnt,(50,50),True)		// 求一给点到对象轮廓最短的距离（在轮廓上返回0，在轮廓外返回负值）(轮廓，点，默认True计算距离_False计算关系（1,-1,0）)
ret = cv2.matchShapes(cnt1,cnt2,1,0.0)			// 两给轮廓的近似度（值越小，越近似）

---------------------------------------------------------------------------------------------------------------

mask = np.zeros(imgGray.shape, np.uint8)
cv2.drawContours(mask,[cut], 0,(255,255,255),-1)
pixelpoints = cv2.findNonZero(mask)			// 获取轮廓区域内的所有点
min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(imgray,mask = mask)
						// 获得最大值，最小值，及他们的位置
mean_val = cv2.mean(img,mask = mask)			// 获得平均颜色，或平均灰度（1：图片或灰度图）
leftmost = tuple(cnt[cnt[:,:,0].argmin()][0])			// 获得最左的点
rightmost = tuple(cnt[cnt[:,:,0].argmax()][0])		// 获得最右的点
topmost = tuple(cnt[cnt[:,:,1].argmin()][0])			// 获得最上的点
bottommost = tuple(cnt[cnt[:,:,1].argmax()][0]		// 获得最下的点

===========================================================================================================

cv2.useOptimized()					// 使用优化性能

cv2.getTickCount()					// 获取时间戳
cv2.getTickFrequency()				// 获取标准时间，除以标准时间得到所用时间

b,g,r = cv2.split(img)					// 把图片通道的颜色分割出来
img = cv2.merge((b,g,r))				// 把通道的颜色合并到图片上
cv2.waitKey(0) & 0xFF				// 等待键盘输入，进程等待.( 按时大于0时，代表等待多少毫秒 - 但是可以键入键盘键打断等待）
cv2.destroyAllWindows()				// 销毁所有的窗口

