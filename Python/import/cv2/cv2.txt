头文件

import cv2

安装方法

https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html

===========================================================================================================
枚举类型

EVENT
cv2.EVENT_LBUTTONDBLCLK		// 鼠标左键双击事件
cv2.EVENT_LBUTTONDOWN		// 鼠标左键点击事件
cv2.EVENT_MOUSEMOVE		// 鼠标移动事件
cv2.EVENT_LBUTTONUP		// 鼠标左键抬起事件

lineStyle
cv2.LINE_AA			// 抗锯齿

color
cv2.COLOR_BGR2GRAY		// 彩色图片转成灰度图

fontStyle
cv2.FONT_HERSHEY_SIMPLEX	// 文字类型

borderType
cv2.BORDER_CONSTANT		// 直接填充颜色，后之后可以增加 value = [255,0,0]
cv2.BORDER_REFLECT
cv2.BORDER_REFLECT_101
cv2.BORDER_DEFAULT
cv2.BORDER_REPLICATE
cv2.BORDER_WRAP

===========================================================================================================

方法

===========================================================================================================
图片处理

img = cv2.imread('imageURL',0)				// 读取图片地址 ( 地址，参数: 0.灰度图 1.彩色图 )
cv2.imshow('imgName',img)				// 显示读取后的图片 （ 显示框名称，图片变量 ）
cd2.imwrite('SaveImageURLName',img)			// 将图片写入本地 （ 保存文件的名称及位置，图片变量）
cv2.filip(img, 0)					// 图片翻转

===========================================================================================================
视频读取

cap = cv2.VideoCapture(0)				// 开启摄像头（参数：0.表示系统默认摄像头）
cap = cv2.VideoCapture(imgURL)				// 读取视频文件（参数：视频文件路径）

cap.get(3)						// 获取视频信息（参数：3.图片宽度，4.图片高度，5.摄像头帧率
cap.set(3, 320)						// 设置视频对应参数的值
cap.isOpened()						// 判断视频是否打开

ret, color_frame = cap.read()				// 读取视频上的图片，返回值List[返回是否成功, 成功后的 img]
cap.release()						// 回收视频内存

===========================================================================================================
视频保存

fourcc = cv2.VideoWriter_fourcc(*'XVID')				// 设置视频编码
out = cv2.VideoWriter('OutPut_01.avi', fourcc, 20.0, (640, 480))	// 定义保存视频信息( 保存文件名, 视频编码, 帧率, 分辨率）
out.write(Img)								// 将单张图片写入视频流
out.release()								// 关闭视频流并保存

===========================================================================================================
图片转换

gray_frame = cv2.cvtColor(color_frame, cv2.COLOR_BGR2GRAY)		// 把彩色图片转成灰度图

===========================================================================================================
图片绘制

img = cv2.line(img, (0,0), (511, 511), (255, 0, 0), 5, cv2.LINE_AA)			// 绘制一条直线（图片变量，位置一，位置二，颜色值，宽度，抗锯齿方式）
img = cv2.rectangle(img, (0,0), (100,100), (134,234,98), 1, cv2.LINE_AA)		// 绘制一个矩形（图片变量，位置一，位置二，颜色值，宽度（-1代表填充），抗锯齿方式）
img = cv2.circle(img, (255,255), 50, (0,0,255), -1, cv2.LINE_AA)			// 绘制一个圆形（图片变量，圆心，半径，颜色值，宽度（-1代表填充），抗锯齿方式）
img = cv2.ellipse(img, (255,255), (100,50), 45, 0, 360, (23,128,66), -1, cv2.LINE_AA)	// 绘制一个椭圆（图片变量，圆心，长短轴半径，旋转角度，显示开始角度，显示结束角度，颜色，宽度（-1代表填充），抗锯齿方式）
img = cv2.polylines(img, [pts], True, (234,123,234), 1, cv2.LINE_AA)			// 绘制一个多边形（图片变量，[RAW*1*2的点数组], 是否闭合，宽度（-1代表填充））

===========================================================================================================
文字绘制

cv2.putText(img, 'fontText', (10,30), fontStyle, 1, (255,255,255), 1, cv2.LINE_AA)	// 在图片上绘制文字（图片变量，输出文字， 位置， 文字样式， 文字大小，颜色，宽度，抗锯齿方式）

===========================================================================================================
窗口绘制

cv2.namedWindow('image')				// 创建一个窗口（名称）
cv2.setMouseCallback('image', funcName)			// 给窗口一个鼠标事件回掉函数（窗口名称，方法名称）
def funcName(event, x, y, flags, param)			// 回掉函数的格式（事件，鼠标X位置，鼠标Y位置，旗帜，参数）

===========================================================================================================
跟踪栏

cv2.createTrackbar('name','image',0,255,func)		// 创建一个跟踪栏（名称，所在窗口名称，最小值，最大值，回掉方法）
def func(x)						// 回掉函数的格式
name = cv2.getTrackbarPos('name','image')		// 获取跟踪栏的值（跟踪栏名称，所在窗口名称）

===========================================================================================================
添加边框

img = cv2.copyMakeBorder(img,10,10,10,10,cv2.BORDER_REPLICATE)	// 给图片添加一个边框（图片变量，上下左右边框宽度，边框类型）


===========================================================================================================
b,g,r = cv2.split(img)					// 把图片通道的颜色分割出来
img = cv2.merge((b,g,r))				// 把通道的颜色合并到图片上
cv2.waitKey(0) & 0xFF					// 等待键盘输入，进程等待.( 按时大于0时，代表等待多少毫秒 - 但是可以键入键盘键打断等待）
cv2.destroyAllWindows()					// 销毁所有的窗口

