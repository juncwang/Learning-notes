import re

re.findall('reStr','inStr')			匹配字符串内所有可匹配的字符串,并返回list

re.split('reStr','inStr')			使用元字符对字符串进行分割,并返回 list

re.sub('replStr','reStr','inStr')		使用replStr去替换需要替换的内容,并返回一个 str

p = re.compile('reStr')				把匹配规则定义成一个变量，返回
p.findall('inStr')				通过变量的规则直接调用字符串进行匹配

re.match('reStr','inStr')			只在字符串开始匹配,返回一个ret对象

ret = re.search('reStr','inStr')		匹配字符串内第一组可匹配的字符串,返回一个ret对象
ret.group()					获取 ret 匹配的结果
ret.group('groupName')				获取 ret 内匹配对象的分组内的结果

===================================================================

( ?P<id>\d{3} )		前面的 ?P<id> 为分组名字 后面内容为匹配内容

===================================================================

# . 			通配符	只能代指任意一个字符 ( 除了换行符\n )
# ^        		只能匹配开头的字符
# $        		只能匹配结尾的字符

# *        		匹配前面的字符 0 到多次
# +        		匹配前面的字符 1 到多次
# ?        		匹配前面的字符 0 到 1 次
# {num}    		匹配前面的字符 num 次
# {minNum,maxNum}    	匹配前面的字符 minNum 到 maxNum 次

# [str1,str2, ...]	字符集	匹配 str1 或 str2 任意一个字符
# [str1-str2]			匹配 str1 到 str2 任意一个字符
# [^str]			匹配与 str 不一样的任意一个字符
# [^str1,str2]			匹配与 str1 或 str2 不一样的任意一个字符

# \			反斜杠	后边跟元字符去除特殊功能
				后边跟普通字符实现特殊功能
# \d			匹配任何十进制数: 它相当于 [0-9]
# \D			匹配任何非十进制数: 它相当于 [^0-9]
# \s			匹配任何空白字符: 它相当于 [ \t\n\r\f\v ]
# \S			匹配任何非空白字符: 它相当于 [ ^\t\n\r\f\v ]
# \w			匹配任何字母数字符: 它相当于 [a-zA-Z0-9]
# \W			匹配任何非字母数字符: 它相当于 [^a-zA-Z0-9]
# \b			匹配一个特殊字符的边界，也就是指单词和空格间的位置
			与python相同的转义需要在字符串前面加 r

# (str)			把 str 作为一个整体与字符串进行匹配
# (str)|3		匹配 str 或 3 的字符串


 