import queue

队列的优势在于，内部有一把锁，每个线程无法同时取出同一个数据。用于多线程

1、Python Queue模块的FIFO队列先进先出。  class queue.Queue(maxsize)
2、LIFO类似于堆，即先进后出。             class queue.LifoQueue(maxsize)
3、还有一种是优先级队列级别越低越先出来。   class queue.PriorityQueue(maxsize)

d = queue.Queue()					创建一个队列
d = queue.Queue(num)					创建一个队列,最长为 num 个数据,如果放入大于 num 个数据就会产生线程阻塞


d.put(var)						传入一个 var 数据
d.put(var,num)						传入一个 var 数据, num 是 0 或 1 ,输入 0 当数据量大于 num 设置的数据总量就会报错，1 则是阻塞
d.get()							取出一个数据,先进先出规则,传入 True 大于取出量后会发生阻塞(默认),False 时会报错

q.qsize()						返回队列的大小
q.empty()						如果队列为空，返回True,反之False
q.full()						如果队列满了，返回True,反之False
q.full 与 maxsize 大小对应
q.get([block[, timeout]])				获取队列，timeout等待时间
q.get_nowait()						相当q.get(False)
非阻塞 q.put(item) 					写入队列，timeout等待时间
q.put_nowait(item) 					相当q.put(item, False)
q.task_done() 						在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号
q.join() 						实际上意味着等到队列为空，再执行别的操作