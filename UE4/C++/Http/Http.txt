使用HTTP时，需要现在 项目名.Build.cs 文件内加入
PrivateDependencyModuleNames.AddRange(new string[] {  "HTTP" });

        
PrivateIncludePathModuleNames.AddRange(new string[] { "HTTP" });

在需要使用的类的头文件加入 #include "Http.h"

.h 文件内添加方法
void loadSchemeDetail();
void LoadSchemeDetailCompleteCallback(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful);

.cpp 文件内实现方法体

void AC_PlayerController::loadSchemeDetail()
{
	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));

	//设置访问的地址
	FString url = "https://httpbin.org/post";					
	HttpRequest->SetURL(url);
	
	//发送请求内容
	FString paramsString = "\"data\":\"200\"";

	HttpRequest->SetContentAsString(paramsString);

	HttpRequest->SetVerb(TEXT("POST"));

	//UE4对象访问网络使用 BindObject 方法进行绑定
	HttpRequest->OnProcessRequestComplete().BindUObject(this, &AC_PlayerController::LoadSchemeDetailCompleteCallback);
	//C++对象访问网络使用 BindRaw 方法进行绑定
	//HttpRequest->OnProcessRequestComplete().BindRaw(this, &InitRequest::loadImageCompleteCallback);

	HttpRequest->ProcessRequest();
}

void AC_PlayerController::LoadSchemeDetailCompleteCallback(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful)
{
	FString MessageBody = "";

	if (!Response.IsValid())
	{
		MessageBody = "{\"success\":\"Error: Unable to process HTTP Request!\"}";
	}
	else if (EHttpResponseCodes::IsOk(Response->GetResponseCode()))
	{
		//成功获取网络返回的数据
		MessageBody = Response->GetContentAsString();
	}
	else
	{
		MessageBody = FString::Printf(TEXT("{\"success\":\"HTTP Error: %d\"}"), Response->GetResponseCode());
	}

}