使用HTTP时，需要现在 项目名.Build.cs 文件内加入
PrivateDependencyModuleNames.AddRange(new string[] {  "HTTP" });

        
PrivateIncludePathModuleNames.AddRange(new string[] { "HTTP" });

在需要使用的类的头文件加入 #include "Http.h"

.h 文件内添加方法
访问函数
void loadSchemeDetail();
网络图片回调函数
void loadImageCompleteCallback(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful);

.cpp 文件内实现方法体

void AC_PlayerController::loadSchemeDetail()
{
	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));

	//设置访问的地址
	FString url = "https://httpbin.org/post/image.jpg";					
	HttpRequest->SetURL(url);

	HttpRequest->SetVerb(TEXT("POST"));

	//UE4对象访问网络使用 BindObject 方法进行绑定
	HttpRequest->OnProcessRequestComplete().BindUObject(this, &AC_PlayerController::loadImageCompleteCallback);
	//C++对象访问网络使用 BindRaw 方法进行绑定
	//HttpRequest->OnProcessRequestComplete().BindRaw(this, &AC_PlayerController::loadImageCompleteCallback);

	HttpRequest->ProcessRequest();
}

void UUI_NetWindown_Air::loadImageCompleteCallback(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful)
{
	if (Response.IsValid())
	{
		if (EHttpResponseCodes::IsOk(Response->GetResponseCode())) {

			const int32 count = Response->GetContentLength();
			TArray<uint8> tdata = Response->GetContent();
			
			// 设置文件路径
			FString url = FPaths::GameContentDir() + "Cache/NetImage" + "/" + gid + ".jpg";

			// 创建目录
			VerifyOrCreateDirectory(FPaths::GameContentDir() + "Cache/NetImage");
			// 保存文件
			saveDataToFile(url, tdata);
		}
	}
}

bool UUI_NetWindown_Air::VerifyOrCreateDirectory(const FString& TestDir)
{
	TArray<FString> dirArr;
	TestDir.ParseIntoArray(dirArr, TEXT("/"), false);


	IPlatformFile& PlatformFile = FPlatformFileManager::Get().GetPlatformFile();

	FString tmpDir = "";

	for (int32 i = 0; i < dirArr.Num(); ++i)

	{

		if (i == 0)

		{

			tmpDir += dirArr[i];

		}

		else
		{
			tmpDir = tmpDir + "/" + dirArr[i];

		}


		if (!PlatformFile.DirectoryExists(*tmpDir))

		{

			PlatformFile.CreateDirectory(*tmpDir);


			if (!PlatformFile.DirectoryExists(*tmpDir))

			{


			}

		}

	}


	return true;
}

void UUI_NetWindown_Air::saveDataToFile(FString filePath, TArray<uint8> tdata)
{
	ofstream file(*filePath, ios::binary);


	char *cp = new char[data.Num()];

	for (int32 i = 0; i < data.Num(); ++i)

	{

		cp[i] = data[i];

	}

	file.write(cp, data.Num());

	file.close();
}